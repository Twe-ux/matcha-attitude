// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  cartItems CartItem[]
  addresses Address[]

  @@map("users")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  images      String[]
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId String      @db.ObjectId
  category   Category    @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Address {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  street     String
  city       String
  postalCode String
  country    String
  isDefault  Boolean @default(false)

  // Relations
  userId String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Order {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  total                 Float
  status                OrderStatus @default(PENDING)
  stripePaymentIntentId String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  addressId String      @db.ObjectId
  address   Address     @relation(fields: [addressId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  price    Float // Prix au moment de l'achat

  // Relations
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
